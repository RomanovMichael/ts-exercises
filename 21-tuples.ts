// Typescript: Кортежи (Tuples)
// Обычно массивы могут менять свой размер и содержать от нуля значений. Поэтому пустой массив как значение [] является валидным для массивов любого типа.

// При этом иногда массивы выступают в качестве упрощенной версии объекта, где количество значений и их порядок строго определены. Например, с помощью такого массива можно представить точку на плоскости: [x, y].

// Такие массивы нужны для экономии символов, когда приходится создавать много одинаковых данных, например, для тестирования.

// В TypeScript подобные массивы называются кортежами, с которыми мы познакомимся в этом уроке.

// Использование кортежей
// У кортежей есть свой синтаксис определения. Например, рассмотрим представление точки:

// const point: [number, number] = [1, 3]
// // Можно поменять
// const point[0] = 4;

// // Обращение к несуществующему индексу приведет к ошибке
// point[3]; // Error!

// // Нельзя создать не совпадающий по типу
// const point2: [number, number] = [1, 'x']; // Error!
// Так как кортежи имеют фиксированное количество элементов, было бы логично, если бы такое же поведение применялось к push() или pop(). Ведь если мы определили кортеж из двух элементов, то элементов должно быть именно два.

// На практике код ниже сработает:

// point.push(10);
// console.log(point); // [4, 3, 10];
// Такое поведения сохраняется для обратной совместимости. И общая рекомендация состоит в том, чтобы не пытаться изменять размер кортежа.

// Кортежи могут состоять из элементов разных типов:

// type HTTPResponse = [number, string];

// // Порядок определения важен
// const response: HTTPResponse = [404, 'Page is not found'];
// // Так не сработает ['Page is not found', 404]
// Часть из них может быть опциональная. В таком случае опциональные элементы должны быть в конце кортежа:

// type HTTPResponse = [number, string?];

// const response1: HTTPResponse = [500];
// const response2: HTTPResponse = [201, 'Created'];
// В примере выше первый элемент массива всегда должен быть числом, а второй — строкой или может отсутствовать.

// Если создавать переменные для кортежей и использовать псевдоним, то его нужно указывать явно. Иначе с точки зрения TypeScript будет создан обычный массив:

// // Будет иметь тип (string | number)[]
// const response = [201, 'Created'];
// Задание
// Создайте и экспортируйте тип Point, который описывает точку в пространстве, состоящую из трех координат: x, y, z.

// Реализуйте функцию isTheSamePoint(), которая проверяет две точки на их одинаковое расположение. Две точки совпадают, если совпадают все их координаты:

// const p1: Point = [1, 3, 4];
// const p2: Point = [1, 3, 4];
// const p3: Point = [0, 8, 4];

// isTheSamePoint(p1, p2); // true
// isTheSamePoint(p1, p3); // false
// isTheSamePoint(p2, p3); // false


type Point = [number, number, number]

function isTheSamePoint(p1: Point, p2: Point): boolean {
  return p1.every((el, i) => el === p2[i]);
}